#installation
sudo apt install git

#add ssh pub key for authentication
ssh-keygen -t ed25519 -C "your_email@example.com"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519

#add the SSH public key to your account on GitHub
cat ~/.ssh/id_ed25519.pub

#configure Global cred
git config --global user.name "username"
git config --global user.email "your-email@example.com"

#initiate a repo
git init

#add file to staging Area
git add .

#commit files to local repo
git commit -am ""

#shows a list of commit
git log only for the commits

#shows the difference between Staging area and current directory
git diff

#shows the difference between local repo and staging area
git diff --staged
git diff --staged HEAD

#shows the difference between current dir and local repo
git diff HEAD 

#diff b/w 2 commits
git diff commit3 commit1
git diff Head~1 Head~2

#shows the updates in the current commit
git show commit3
git show Head~2

#clone a repo for 1st time
git clone 

#pull changes from repo
git pull

#Create a new branch
git branch test

#Create a branch and checkout
git checkout -b test

#change branch
git checkout test

#move back in time to various commit
git checkout commitID


#add a tag
git tag -a v1.1 commitID -m "Message for this commit"

#revert changes - works only on modified file not new files
git restore <filename>
git checkout <filename>


#revert changes from staging area to working directory (2 step)
git restore --stage <filename>
git restore <filename>

#revert changes from local repo to Working directory (2 step)
git reset HEAD~ or git reset HEAD^
git restore <filename>

#No direct way to revert changes from Remote Repo

#Use .gitignore to add files that is not required for Staging or Commit
#Use Wildcard *.txt *.md

#Skip Add .
git commit -am "Used to add and commit modified files in One step"

#git rebase to combine multiple commits to 1 commit ~ to specify number to club
#cannot rebase 1st commit
git rebase -i HEAD~2
